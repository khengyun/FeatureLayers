name: Upload Python Package

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build

    - name: Install twine
      run: python -m pip install twine

    - name: Install setuptools_scm
      run: python -m pip install setuptools_scm

    - name: Build and publish package
      env:
        PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        echo "[distutils]" > ~/.pypirc
        echo "index-servers =" >> ~/.pypirc
        echo "    pypi" >> ~/.pypirc
        echo "[pypi]" >> ~/.pypirc
        echo "repository: https://upload.pypi.org/legacy/" >> ~/.pypirc
        echo "username: __token__" >> ~/.pypirc
        echo "password: $PYPI_API_TOKEN" >> ~/.pypirc

        VERSION=$(python -c "from setuptools_scm import get_version; print(get_version())")
        python -m build --sdist --wheel
        if twine check --config-file ~/.pypirc dist/* 2>&1 | grep -q "File already exists"; then
          echo "Package version already exists on PyPI. Retrieving existing file information..."
          EXISTING_FILE_PATH=$(twine check --config-file ~/.pypirc dist/* 2>&1 | grep "File already exists" | awk -F "'" '{print $2}')
          EXISTING_FILE_NAME=$(basename "$EXISTING_FILE_PATH")
          echo "Existing file name: $EXISTING_FILE_NAME"
          echo "Existing file path: $EXISTING_FILE_PATH"
          echo "EXISTING_FILE_PATH=$EXISTING_FILE_PATH" >> $GITHUB_ENV
          echo "EXISTING_FILE_NAME=$EXISTING_FILE_NAME" >> $GITHUB_ENV
        else
          twine upload --config-file ~/.pypirc dist/*
          echo "Package successfully published on PyPI"
        fi

        echo "::set-output name=version::$VERSION"
     
    - name: Create a Release
      id: create_release
      uses: action-pack/github-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag: v${{ steps.deploy.outputs.version }}
        title: Release ${{ steps.deploy.outputs.version }}
        body: |
          v${{ steps.deploy.outputs.version }}
          Download the package from [PyPI](https://pypi.org/project/your-package-name/)
  
    - name: Attach PyPI release link
      uses: svenstaro/upload-release-action@v2
      with:
        file: ${{ steps.deploy.outputs.version }}/dist/*
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        tag: v${{ steps.deploy.outputs.version }}
        overwrite: false
